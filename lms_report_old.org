#+TITLE: Library Management System Project Report
#+OPTIONS: toc:nil

#+BEGIN_ABSTRACT
Library Management System is a software used to manage the catalog of
a library. This helps to keep the records of all the transaction of
books available in the library. Each patron and the item has a unique
ID in the database that allows the Library Management System to track
its activity.  Library Management Systems are needed in every school,
college, or any type of institutions where there is a library
present. As the technology around us is growing, the library
management systems hasn’t improved that much since 2005. The goal is
to make prototype of a simple android based application which can
completely handle and (mostly) automate the process of managing a
library. It’ll reduce the needs to have a counter full of people (thus
slowing and manually doing the process) for issuing and/or depositing
books.
#+END_ABSTRACT
#+TOC: headlines 3

** TASKS
*** TODO Re-format document [4/8]
    SCHEDULED: <2018-04-26 Thu>
    - [X] Add Abstract
    - [X] Add literature survey
    - [X] Add introduction
    - [-] Add Requirements[2/8]
      - [X] Specific Requirements[3/3] 
	- [X] Hardware Requirements
	- [X] Software Requiements
	- [X] Communication Interfaces
      - [X] Functional Requirements[3/3]
	- [X] The Borrower
	- [X] The Librarian
	- [X] The Administrator
      - [ ] Performance Requirements[0/3]
	- [ ] Speed and Latency Requirements
	- [ ] Precision or Accuracy Requirements
	- [ ] Capacity Requirements
      - [ ] Dependability Requiremnents[0/3]
	- [ ] Reliability
	- [ ] Availability
	- [ ] Robustness or Fault-Tolerance
      - [ ] Maintainability and Supportability Requirements[0/4]
	- [ ] Maintainability
	- [ ] Supportability
	- [ ] Adaptability
	- [ ] Scalability
      - [ ] Security Requirements[0/3]
	- [ ] Access
	- [ ] Integrity
	- [ ] Privacy
      - [ ] Usability Requirements[0/3]
	- [ ] Ease of Use
	- [ ] Learning Curve
	- [ ] Training
      - [ ] Software System Attributes
    - [ ] Add Design[0/2]
      - [ ] System Design
      - [ ] User Interface Design
    - [-] Add diagrams[4/6]
      - [X] Level 0 DFD
      - [X] Level 1 DFD
      - [X] Level 2 DFD
      - [X] Use Case Diagram
      - [ ] Entity Relationship Diagram
      - [ ] Database Schema Diagram
    - [X] Add Conclusion[2/2]
      - [X] Add Text
      - [X] Add Future Scope
    - [ ] Add Acknowledgement
**** Learning Curve
**** Training Requirements

** Software System Attributes
- Availability :: Availability defines the proportion of time that the
                  system is functional and working. It can be measured
                  as a percentage of the total system downtime over a
                  predefined period. Availability will be affected by
                  system errors, infrastructure problems, malicious
                  attacks, and system load.
- Conceptual Integrity :: Conceptual integrity defines the consistency
     and coherence of the overall design. This includes the way that
     components or modules are designed, as well as factors such as
     coding style and variable naming.
- Interoperability :: Interoperability is the ability of a system or
     different systems to operate successfully by communicating and
     exchanging information with other external systems written and
     run by external parties. An interoperable system makes it easier
     to exchange and reuse information internally as well as
     externally.
- Maintainability :: Maintainability is the ability of the system to
     undergo changes with a degree of ease. These changes could impact
     components, services, features, and interfaces when adding or
     changing the functionality, fixing errors, and meeting new
     business requirements.
- Manageability :: Manageability defines how easy it is for system
                   administrators to manage the application, usually
                   through sufficient and useful instrumentation
                   exposed for use in monitoring systems and for
                   debugging and performance tuning.
- Reliability :: Reliability is the ability of a system to remain
                 operational over time. Reliability is measured as the
                 probability that a system will not fail to perform
                 its intended functions over a specified time
                 interval.
- Reusability :: Reusability defines the capability for components and
                 subsystems to be suitable for use in other
                 applications and in other scenarios. Reusability
                 minimizes the duplication of components and also the
                 implementation time.
- Scalability :: Scalability is ability of a system to either handle
                 increases in load without impact on the performance
                 of the system, or the ability to be readily enlarged.
- Security :: Security is the capability of a system to prevent
              malicious or accidental actions outside of the designed
              usage, and to prevent disclosure or loss of
              information. A secure system aims to protect assets and
              prevent unauthorized modification of information.
- Usability :: Usability defines how well the application meets the
               requirements of the user and consumer by being
               intuitive, easy to localize and globalize, providing
               good access for disabled users, and resulting in a good
               overall user experience.
* DESIGN
** System Design
*** Database Design
There are a few points to consider when designing and developing the
system.
1. Database :: The database should be normalized all the time. Maximum
               permissible redundancy should not be more than 10% at
               any instance.
2. Backups :: Backups should be designed in such a way that it should
              be easy enough to replace the corrupted back end with a
              most recently backed up on withing 15 mins without any
              failure.

*** Program Design

** User Interface Design
The Android user interface should follow the material design
guidelines provided by Google Inc.

* DIAGRAMS

#+CAPTION: Level 0 DFD
#+NAME: fig:level0dfd
[[./diagrams/level0dfd.png]]
#+CAPTION: Level 1 DFD
#+NAME: level1dfd
[[./diagrams/level1dfd.png]]
#+CAPTION: Level 2 DFD
#+NAME: level2dfd
[[./diagrams/level2dfd.png]]

#+CAPTION: Use Case Diagram
#+NAME: usecasediag
[[./diagrams/usecase.png]]

** Entity Relationship Diagram
*** TODO To be made anew
** Database Schema
*** TODO To be made anew from the JSON Structure
* CONCLUSION
This is a topic that has never been touched before by any one
developing systems for managing libraries. While the world is moving
towards a more mobile and cloud based approach, why library management
system should stick to the local database and application environment
that dates back to the 90's.  This approach of library management
system will solve problems like redundant information storage, loss of
information in case of a natural disaster and also ease of access for
the patrons of a library.

** Future Scope
1. Launching a platform independent system for reusing and using all the existing and future hardware.
2. A greater portability and scalability so that the application can be mended to suit any need that the client wants.
3. Developing a totally independent and open source API so that developers can easily use what we've developed and further improve that.

* ACKNOWLEDGEMENT
This project would not have been possible without the help of
Ms. Shalini Mitra, Asst. Prof., Dept. of IT, CIEM and Mr. Samir
Biswas, HOD, Dept. of IT, CIEM.

However, we also thank Rajkumar Pramanik of Hybriona Labs, Gujrat for
helping us when we were stuck in a loop of bad codes and ideas.

Finally I would like to extend my deepest gratitude to all the
teachers of the IT Department of CIEM without whose love, support and
understanding we could never have completed this project proposal.
